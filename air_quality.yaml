substitutions:
  device_name: air_quality
  upper_device_name: Air Quality

esphome:
  name: $device_name
  platform: ESP32
  board: wemos_d1_mini32

wifi: !include include/wifi.yaml

captive_portal:

web_server:
  port: 80

# Enable logging
logger:
  level: WARN

# Enable Home Assistant API
# api:

ota:

mqtt: !include include/mqtt.yaml
      
switch:
  - platform: restart
    name: $upper_device_name Restart
    
i2c:

# uart:
#   rx_pin: GPIO23
#   baud_rate: 9600
    
sensor:
  # - platform: pmsx003
  #   type: PMSX003
  #   pm_1_0:
  #     name: "Particulate Matter <1.0µm Concentration"
  #   pm_2_5:
  #     name: "Particulate Matter <2.5µm Concentration"
  #   pm_10_0:
  #     name: "Particulate Matter <10.0µm Concentration"
    
  - platform: wifi_signal
    name: $upper_device_name WiFi Signal
    update_interval: 60s

  - platform: sgp30
    eco2:
      name: $upper_device_name eCO2
      id: eco2
      accuracy_decimals: 0
    tvoc:
      name: $upper_device_name TVOC
      id: tvoc
      accuracy_decimals: 0
    address: 0x58
    update_interval: 60s
    compensation:
      temperature_source: temp
      humidity_source: humid
    baseline:
      eco2_baseline: 0x8A4A
      tvoc_baseline: 0x9019
    
  - platform: am2320
    temperature:
      name: $upper_device_name Temperature
      id: temp
      accuracy_decimals: 2
    humidity:
      name: $upper_device_name Humidity
      id: humid
    address: 0x5c
    update_interval: 60s
    
  # - platform: template
  #   name: $upper_device_name Temp Linear Correction
  #   id: temp_linear
  #   accuracy_decimals: 2
  #   icon: mdi:thermometer
  #   unit_of_measurement: "°F"
  #   lambda: |-
  #     if (id(temp).state) {
  #       return (id(temp).state * 9/5) + 32;
  #     } else {
  #       return {};
  #     }
  #   filters:
  #     - calibrate_linear:   # in Fahrenheit
  #       - 36.14 -> 32.67
  #       - 66.56 -> 63.79
  #       - 69.44 -> 64.92
  #       - 75.74 -> 70.52
  #       - 76.64 -> 72.41
  #       - 78.44 -> 74.76
  #       - 79.16 -> 75.81
  #   update_interval: 60s
    
  # - platform: template
  #   name: $upper_device_name Temp Polynomial Correction
  #   id: temp_poly
  #   accuracy_decimals: 2
  #   icon: mdi:thermometer
  #   unit_of_measurement: "°F"
  #   lambda: |-
  #     if (id(temp).state) {
  #       return (id(temp).state * 9/5) + 32;
  #     } else {
  #       return {};
  #     }
  #   filters:
  #       - calibrate_polynomial:
  #           degree: 4
  #           datapoints:   # in Fahrenheit
  #             - 36.14 -> 32.67
  #             - 66.56 -> 63.79
  #             - 69.44 -> 64.92
  #             - 75.74 -> 70.52
  #             - 76.64 -> 72.41
  #             - 78.44 -> 74.76
  #             - 79.16 -> 75.81
  #   update_interval: 60s
    
  - platform: template
    id: tempf
    lambda: |-
      if (id(temp).state) {
        return (id(temp).state * 9/5) + 32;
      } else {
        return {};
      }
    
font:
  - file: 'fonts/arial.ttf'
    id: font1
    size: 12

  - file: 'fonts/arial.ttf'
    id: font2
    size: 24

  - file: 'fonts/arial.ttf'
    id: font3
    size: 10

display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    reset_pin: D0
    address: 0x3C
    id: screen 
    pages:
      - id: tvoc_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "TVOC:");
          // Print TVOC value
          if (id(tvoc).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(tvoc).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "ppb");
          }
      - id: eco2_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "eCO2:");
          // Print eCO2 value
          if (id(eco2).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(eco2).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "ppm");
          }
      - id: temp_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "Temp:");
          // Print temperature
          if (id(tempf).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(tempf).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "°F");
          }
      - id: tempc_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "Temp:");
          // Print temperature
          if (id(temp).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(temp).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "°C");
          }
      - id: humid_page
        lambda: |-
          it.print(0,0, id(font1), TextAlign::TOP_LEFT,  "Humidity:");
          // Print Humidity
          if (id(humid).has_state()) {
            it.printf(32,13, id(font2), TextAlign::TOP_CENTER,  " %.0f", id(humid).state);
            it.print(64,48, id(font3), TextAlign::BOTTOM_RIGHT,  "%");
          }
interval:
  - interval: 2.5s
    then:
      - display.page.show_next: screen
      - component.update: screen